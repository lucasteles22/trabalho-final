"use strict";var app=angular.module("sistemaAcademico",["ngRoute","LocalStorageModule","angular-loading-bar"]);app.config(["$routeProvider","$httpProvider",function($routeProvider,$httpProvider){$httpProvider.defaults.headers.get||($httpProvider.defaults.headers.get={}),$httpProvider.defaults.headers.get["If-Modified-Since"]="Mon, 26 Jul 1997 05:00:00 GMT",$httpProvider.defaults.headers.get["Cache-Control"]="no-cache",$httpProvider.defaults.headers.get.Pragma="no-cache",$httpProvider.defaults.useXDomain=!0,delete $httpProvider.defaults.headers.common["X-Requested-With"],$httpProvider.interceptors.push("authInterceptorService"),$routeProvider.when("/login",{templateUrl:"partials/login.html",controller:"loginCtrl"}).when("/student/info",{templateUrl:"partials/students/index.html",controller:"studentsHomeCtrl"}).when("/coordinator/info",{templateUrl:"partials/coordinators/index.html",controller:"coordinatorsHomeCtrl"}).when("/coordinator/info-by-course/:param1",{templateUrl:"partials/coordinators/course.html",controller:"coordinatorInfoCourseCtrl"}).when("/coordinator/info-by-student/:param1",{templateUrl:"partials/coordinators/student.html",controller:"coordinatorInfoStudentCtrl"}).when("/secretary/info",{templateUrl:"partials/secretaries/index.html",controller:"secretariesHomeCtrl"}).when("/secretary/info-by-student/:param1",{templateUrl:"partials/secretaries/student.html",controller:"secretariesInfoStudentCtrl"}).otherwise({redirectTo:"/login"})}]),app.run(["authService",function(authService){authService.fillAuthData()}]),function(){"user strict";app.controller("coordinatorInfoCourseCtrl",function($scope,$filter,$routeParams,coordinatorService,authService,dateFilter){var courseId=$routeParams.param1;coordinatorService.getInfoByCourse(authService.authentication.userName,courseId).then(function(response){$scope.coordinator=response},function(err){})})}(),function(){"user strict";app.controller("coordinatorInfoStudentCtrl",function($scope,$filter,$routeParams,coordinatorService,authService,dateFilter){var studentUserName=$routeParams.param1,allScores=[];coordinatorService.getInfoByStudent(authService.authentication.userName,studentUserName).then(function(response){$scope.coordinator=response,allScores=response.Info.Student.Scores},function(err){}),$scope.filter={option:"subject"},$scope.filterByDate=function(s,e){$scope.coordinator.Info.Student.Scores=$filter("searchByDate")(allScores,$scope.startDateStr,$scope.endDateStr)},$scope.filterSelected=function(){"subject"==$scope.filter.option?($("#subject-filter").show("slow"),$("#date-filter").hide("slow"),$scope.coordinator.Info.Student.Scores=allScores):($scope.searchSubject="",$("#date-filter").show("slow"),$("#subject-filter").hide("slow"))}})}(),function(){"user strict";app.controller("coordinatorsHomeCtrl",function($scope,$filter,coordinatorService,authService,dateFilter){coordinatorService.getInfoCoordinator(authService.authentication.userName).then(function(response){$scope.coordinator=response},function(err){})})}(),app.controller("headerCtrl",function($scope,$location,authService){$scope.authentication=authService.authentication,$scope.logOut=function(){authService.logOut(),$location.path("/")}}),app.controller("loginCtrl",function($scope,$location,authService){$scope.message="",$scope.login=function(user){authService.login(user).then(function(response){$scope.authentication=authService.authentication,$location.path($.inArray("student",$scope.authentication.roles)>-1?"/student/info":$.inArray("coordinator",$scope.authentication.roles)>-1?"/coordinator/info":"/secretary/info")},function(err){$scope.message=err.error_description})}}),function(){"user strict";app.controller("secretariesHomeCtrl",function($scope,$filter,secretaryService,authService,dateFilter){secretaryService.getAllStudents().then(function(response){$scope.secretary=response},function(err){})})}(),function(){"user strict";app.controller("secretariesInfoStudentCtrl",function($scope,$filter,$routeParams,secretaryService,authService,dateFilter){var studentUserName=$routeParams.param1;secretaryService.getInfoStudent(studentUserName).then(function(response){$scope.secretary=response},function(err){})})}(),function(){"user strict";app.controller("studentsHomeCtrl",function($scope,$filter,studentService,authService,dateFilter){var allScores=[];studentService.getInfoStudent(authService.authentication.userName).then(function(response){$scope.student=response,allScores=response.Scores},function(err){}),$scope.filter={option:"subject"},$scope.filterSelected=function(){"subject"==$scope.filter.option?($("#subject-filter").show("slow"),$("#date-filter").hide("slow"),$scope.student.Scores=allScores):($scope.searchSubject="",$("#date-filter").show("slow"),$("#subject-filter").hide("slow"))},$scope.verifyDate=function(){if(void 0!=$scope.startDateStr&&void 0!=$scope.endDateStr){var startDateChoosed=new Date($scope.startDateStr),endDateChoosed=new Date($scope.endDateStr);if(endDateChoosed>=startDateChoosed)return!1}return!0},$scope.filterByDate=function(s,e){new Date($scope.startDateStr)<=new Date($scope.endDateStr)?$scope.student.Scores=$filter("searchByDate")(allScores,$scope.startDateStr,$scope.endDateStr):alert("Data inicial maior que data final. Por favor, altere!")}})}(),app.directive("loginDirective",function(){return{templateUrl:"partials/tpl/login.tpl.html"}}),function(){app.filter("searchByDate",function(){return function(items,start,end){for(var arrayToReturn=[],i=0;i<items.length;i++){var s=new Date(items[i].StartDate),st=new Date(start),e=new Date(end);s.setDate(s.getDate()+1),s>=st&&e>=s&&arrayToReturn.push(items[i])}return arrayToReturn}})}(),function(){app.factory("authInterceptorService",["$q","$location","localStorageService",function($q,$location,localStorageService){var authInterceptorServiceFactory={},_request=function(config){config.headers=config.headers||{};var authData=localStorageService.get("authorizationData");return authData&&(config.headers.Authorization="Bearer "+authData.token),config},_responseError=function(rejection){return 401===rejection.status&&$location.path("/login"),$q.reject(rejection)};return authInterceptorServiceFactory.request=_request,authInterceptorServiceFactory.responseError=_responseError,authInterceptorServiceFactory}])}(),app.factory("authService",["$http","$q","localStorageService",function($http,$q,localStorageService){var serviceBase="http://localhost:50689/",authServiceFactory={},_authentication={isAuth:!1,userName:"",roles:[]},_login=function(loginData){var data="grant_type=password&username="+loginData.userName+"&password="+loginData.password,deferred=$q.defer();return $http.post(serviceBase+"token",data,{headers:{"Content-Type":"application/x-www-form-urlencoded"}}).success(function(response){var roles=JSON.parse(response.roles);localStorageService.set("authorizationData",{token:response.access_token,userName:loginData.userName,roles:roles}),_authentication.isAuth=!0,_authentication.userName=loginData.userName,_authentication.roles=roles,deferred.resolve(response)}).error(function(err,status){_logOut(),deferred.reject(err)}),deferred.promise},_logOut=function(){localStorageService.remove("authorizationData"),_authentication.isAuth=!1,_authentication.userName="",_authentication.roles=[]},_fillAuthData=function(){var authData=localStorageService.get("authorizationData");authData&&(_authentication.isAuth=!0,_authentication.userName=authData.userName,_authentication.roles=authData.roles)};return authServiceFactory.login=_login,authServiceFactory.logOut=_logOut,authServiceFactory.fillAuthData=_fillAuthData,authServiceFactory.authentication=_authentication,authServiceFactory}]),function(){app.factory("coordinatorService",["$http","$q",function($http,$q){var coordinatorServiceFactory={},serviceBase="http://localhost:50689/",_getInfoCoordinator=function(userName){var deferred=$q.defer();return $http.get(serviceBase+"api/coordinators/info/?username="+userName).success(function(res){deferred.resolve(res)}).error(function(err,status){deferred.reject(err)}),deferred.promise},_getInfoByCourse=function(userName,courseId){var deferred=$q.defer();return $http.get(serviceBase+"api/coordinators/info-by-course/?username="+userName+"&courseId="+courseId).success(function(res){deferred.resolve(res)}).error(function(err,status){deferred.reject(err)}),deferred.promise},_getInfoByStudent=function(userName,studentUserName){var deferred=$q.defer();return $http.get(serviceBase+"api/coordinators/info-by-student/?username="+userName+"&studentUserName="+studentUserName).success(function(res){deferred.resolve(res)}).error(function(err,status){deferred.reject(err)}),deferred.promise};return coordinatorServiceFactory.getInfoCoordinator=_getInfoCoordinator,coordinatorServiceFactory.getInfoByCourse=_getInfoByCourse,coordinatorServiceFactory.getInfoByStudent=_getInfoByStudent,coordinatorServiceFactory}])}(),function(){app.factory("secretaryService",["$http","$q",function($http,$q){var secretaryServiceFactory={},serviceBase="http://localhost:50689/",_getAllStudents=function(){var deferred=$q.defer();return $http.get(serviceBase+"api/secretaries/get-all-students/").success(function(res){deferred.resolve(res)}).error(function(err,status){deferred.reject(err)}),deferred.promise},_getInfoStudent=function(studentUserName){var deferred=$q.defer();return $http.get(serviceBase+"api/secretaries/get-info-student/?studentUserName="+studentUserName).success(function(res){deferred.resolve(res)}).error(function(err,status){deferred.reject(err)}),deferred.promise};return secretaryServiceFactory.getAllStudents=_getAllStudents,secretaryServiceFactory.getInfoStudent=_getInfoStudent,secretaryServiceFactory}])}(),function(){app.factory("studentService",["$http","$q",function($http,$q){var studentServiceFactory={},serviceBase="http://localhost:50689/",_getInfoStudent=function(userName){var deferred=$q.defer();return $http.get(serviceBase+"api/students/info/?username="+userName).success(function(res){deferred.resolve(res)}).error(function(err,status){deferred.reject(err)}),deferred.promise};return studentServiceFactory.getInfoStudent=_getInfoStudent,studentServiceFactory}])}();